---
  AWSTemplateFormatVersion: 2010-09-09
  Description: "Performance Test Environment"
  Parameters:
    RegionName:
      Type: String
      Default: us-west-2
    KeyName:
      Type: String
    ServerInstanceType:
      Type: String
      Default: m7i.2xlarge
    ClientInstanceType:
      Type: String
      Default: m7i.4xlarge
    ViewerInstanceType:
      Type: String
      Default: m7i.xlarge
    AMI:
      Type: String
      # Default: ami-0eb199b995e2bc4e3  # Ubuntu_20
      Default: ami-0895022f3dac85884  # Amazon Linux 2023
  Resources:
    VPC:
      Type: AWS::EC2::VPC
      Properties:
        CidrBlock: 10.0.0.0/16
        EnableDnsSupport: true
        EnableDnsHostnames: true
        InstanceTenancy: default
            
    InternetGateway:
      Type: AWS::EC2::InternetGateway
            
    GatewayAttachment:
      Type: AWS::EC2::VPCGatewayAttachment
      Properties:
        VpcId: !Ref VPC
        InternetGatewayId: !Ref InternetGateway
            
    PublicSubnetA:
      Type: AWS::EC2::Subnet
      Properties:
        CidrBlock: 10.0.1.0/24
        AvailabilityZone: !Join 
          - ''
          - - !Ref RegionName
            - a
        MapPublicIpOnLaunch: true
        VpcId: !Ref VPC

    PublicSubnetB:
      Type: AWS::EC2::Subnet
      Properties:
        CidrBlock: 10.0.2.0/24
        AvailabilityZone: !Join 
          - ''
          - - !Ref RegionName
            - b
        MapPublicIpOnLaunch: true
        VpcId: !Ref VPC

    # PublicSubnetC:
    #   Type: AWS::EC2::Subnet
    #   Properties:
    #     CidrBlock: 10.0.3.0/24
    #     AvailabilityZone: !Join 
    #       - ''
    #       - - !Ref RegionName
    #         - c
    #     MapPublicIpOnLaunch: true
    #     VpcId: !Ref VPC

    MainRouteTable:
      Type: AWS::EC2::RouteTable
      Properties:
        VpcId: !Ref VPC
            
    NonLocalRoute:
      Type: AWS::EC2::Route
      Properties:
        DestinationCidrBlock: 0.0.0.0/0
        RouteTableId: !Ref MainRouteTable
        GatewayId: !Ref InternetGateway
      DependsOn: InternetGateway
            
    PublicSubnetRouteTableAssociationA:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        RouteTableId: !Ref MainRouteTable
        SubnetId: !Ref PublicSubnetA
            
    PublicSubnetRouteTableAssociationB:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        RouteTableId: !Ref MainRouteTable
        SubnetId: !Ref PublicSubnetB
            
    # PublicSubnetRouteTableAssociationC:
    #   Type: AWS::EC2::SubnetRouteTableAssociation
    #   Properties:
    #     RouteTableId: !Ref MainRouteTable
    #     SubnetId: !Ref PublicSubnetC
            
    ViewerSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupName: ManagerSecurityGroup
        GroupDescription: Manager Ingress
        VpcId: !Ref VPC
        SecurityGroupIngress: 
          - CidrIp: 0.0.0.0/0
            FromPort: 8080
            ToPort: 8080
            IpProtocol: tcp

    SSHSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupName: SSHSecurityGroup
        GroupDescription: SSH Ingress
        VpcId: !Ref VPC
        SecurityGroupIngress: 
          - CidrIp: 0.0.0.0/0
            FromPort: 22
            ToPort: 22
            IpProtocol: tcp

    LocalSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupName: LocalSecurityGroup
        GroupDescription: Ingress from within the VPC
        VpcId: !Ref VPC
        SecurityGroupIngress: 
          - CidrIp: 10.0.0.0/16
            FromPort: -1
            ToPort: -1
            IpProtocol: -1

    RedisSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupName: RedisSecurityGroup
        GroupDescription: Ingress for Redis
        VpcId: !Ref VPC
        SecurityGroupIngress: 
          - CidrIp: 0.0.0.0/0
            FromPort: 8443
            ToPort: 8443
            IpProtocol: tcp
          - CidrIp: 0.0.0.0/0
            FromPort: 9443
            ToPort: 9443
            IpProtocol: tcp

    ServerInstance1:
      Type: AWS::EC2::Instance 
      Properties:
        SubnetId: !Ref PublicSubnetA
        SecurityGroupIds: 
          - !Ref SSHSecurityGroup
          - !Ref LocalSecurityGroup
          - !Ref RedisSecurityGroup
        PrivateIpAddress: 10.0.1.101 
        InstanceType: !Ref ServerInstanceType
        ImageId: !Ref AMI
        KeyName: !Ref KeyName

    ViewerInstance1:
      Type: AWS::EC2::Instance 
      Properties:
        SubnetId: !Ref PublicSubnetB
        SecurityGroupIds: 
          - !Ref SSHSecurityGroup
          - !Ref LocalSecurityGroup
          - !Ref ViewerSecurityGroup
        PrivateIpAddress: 10.0.2.111 
        InstanceType: !Ref ViewerInstanceType
        ImageId: !Ref AMI
        KeyName: !Ref KeyName


    ServerInstance2:
      Type: AWS::EC2::Instance 
      Properties:
        SubnetId: !Ref PublicSubnetB
        SecurityGroupIds: 
          - !Ref SSHSecurityGroup
          - !Ref LocalSecurityGroup
          - !Ref RedisSecurityGroup
        PrivateIpAddress: 10.0.2.101
        InstanceType: !Ref ServerInstanceType
        ImageId: !Ref AMI
        KeyName: !Ref KeyName

    LoadTestInstance1:
      Type: AWS::EC2::Instance 
      Properties:
        SubnetId: !Ref PublicSubnetA
        SecurityGroupIds: 
          - !Ref SSHSecurityGroup
          - !Ref LocalSecurityGroup
        PrivateIpAddress: 10.0.1.201 
        InstanceType: !Ref ClientInstanceType
        ImageId: !Ref AMI
        KeyName: !Ref KeyName

# TODO - update this to use looping syntax
  Outputs:
    Server1PublicIP:
      Value: !GetAtt 
        - ServerInstance1 
        - PublicIp
    Server1PrivateIP:
      Value: !GetAtt 
        - ServerInstance1 
        - PrivateIp
    Server2PublicIP:
      Value: !GetAtt 
        - ServerInstance2
        - PublicIp
    Server2PrivateIP:
      Value: !GetAtt 
        - ServerInstance2
        - PrivateIp
    LoadTest1PublicIP:
      Value: !GetAtt 
        - LoadTestInstance1 
        - PublicIp
    LoadTest1PrivateIP:
      Value: !GetAtt 
        - LoadTestInstance1
        - PrivateIp
    Viewer1PublicIP:
      Value: !GetAtt 
        - ViewerInstance1
        - PublicIp
    Viewer1PrivateIP:
      Value: !GetAtt 
        - ViewerInstance1
        - PrivateIp
